#!/bin/bash

# Copyright (c) 2021 FEROX YT EIRL, www.ferox.yt <devops@ferox.yt>
# Copyright (c) 2021 Jérémy WALTHER <jeremy.walther@golflima.net>
# See <https://github.com/frxyt/docker-passhport> for details.

set -e;
[ "${FRX_DEBUG}" = 1 ] && set -x;

# Print image version
cat /etc/frx_version

# Configure TZ
if [ -n "${TZ}" ]; then
    echo "Configuring TZ ..."
    if [ -f "/usr/share/zoneinfo/${TZ}" ]; then
        cp /usr/share/zoneinfo/${TZ} /etc/localtime
        echo "${TZ}" > /etc/timezone
        date
    else
        echo "Error: ${TZ} is not a valid TZ data!"
        echo "Available TZ data:"
        ls -1 /usr/share/zoneinfo
        exit 1;
    fi
fi

# Generate SSH keys of PaSSHport if needed
mkdir -p /home/passhport/.ssh
chmod 700 /home/passhport/.ssh
chown passhport:passhport -R /home/passhport/.ssh
if [ ! -f /home/passhport/.ssh/id_rsa ]; then
    echo "Generating PaSSHport SSH RSA key ..."
    su -c 'ssh-keygen -t rsa -b 4096 -N "" -f ~/.ssh/id_rsa > /dev/null' passhport
fi
if [ ! -f /home/passhport/.ssh/id_ecdsa ]; then
    echo "Generating PaSSHport SSH ECDSA key ..."
    su -c 'ssh-keygen -t ecdsa -b 521 -N "" -f ~/.ssh/id_ecdsa > /dev/null' passhport
fi
chmod 400 /home/passhport/.ssh/*

# Generate SSH keys of OpenSSH-Server if needed
mkdir -p /etc/ssh/keys
if [ ! -e /etc/ssh/keys/ssh_host_ecdsa_key -a ! -e /etc/ssh/keys/ssh_host_ecdsa_key.pub ]; then
    echo "Generating SSH host ECDSA key ..."
    ssh-keygen -t ecdsa -f /etc/ssh/keys/ssh_host_ecdsa_key -qN "" < /dev/null
    chmod 400 /etc/ssh/keys/ssh_host_ecdsa_key
    chmod 444 /etc/ssh/keys/ssh_host_ecdsa_key.pub
fi
if [ ! -e /etc/ssh/keys/ssh_host_ed25519_key -a ! -e /etc/ssh/keys/ssh_host_ed25519_key.pub ]; then
    echo "Generating SSH host ED25519 key ..."
    ssh-keygen -t ed25519 -f /etc/ssh/keys/ssh_host_ed25519_key -qN "" < /dev/null
    chmod 400 /etc/ssh/keys/ssh_host_ed25519_key
    chmod 444 /etc/ssh/keys/ssh_host_ed25519_key.pub
fi
if [ ! -e /etc/ssh/keys/ssh_host_rsa_key -a ! -e /etc/ssh/keys/ssh_host_rsa_key.pub ]; then
    echo "Generating SSH host RSA key ..."
    ssh-keygen -t rsa -b 4096 -f /etc/ssh/keys/ssh_host_rsa_key -qN "" < /dev/null
    chmod 400 /etc/ssh/keys/ssh_host_rsa_key
    chmod 444 /etc/ssh/keys/ssh_host_rsa_key.pub
fi

# Create certificates of PaSSHport if needed
mkdir -p /etc/passhport/certs
if [ ! -f /etc/passhport/certs/cert.pem ]; then
    if [ ! -f /etc/passhport/certs/cert.cnf ]; then
        echo "Generating PaSSHport certicate configuration ..."
        cp /passhport/tools/openssl-for-passhportd.cnf /etc/passhport/certs/cert.cnf
        sed -i '/^DNS./d' /etc/passhport/certs/cert.cnf
        echo 'DNS.1 = localhost' >> /etc/passhport/certs/cert.cnf
    fi
    if [ ! -f /etc/passhport/certs/key.pem ]; then
        echo "Generating PaSSHport certicate key ..."
        openssl genrsa -out /etc/passhport/certs/key.pem 4096 > /dev/null 2>&1
    fi
    echo "Generating PaSSHport certicate ..."
    openssl req -new -key /etc/passhport/certs/key.pem \
        -config /etc/passhport/certs/cert.cnf \
        -out /etc/passhport/certs/cert.pem \
        -subj "${PASSHPORT_CERT_SUBJ}" \
        -x509 -days ${PASSHPORT_CERT_DAYS} -sha256 \
        -extensions v3_req
fi
chmod 700 /etc/passhport/certs
chmod 400 /etc/passhport/certs/*
chown passhport:passhport -R /etc/passhport/certs

# Create database of PaSSHport if needed
mkdir -p /var/lib/passhport
chown passhport:passhport -R /var/lib/passhport
if [ ! -f /var/lib/passhport/app.db ]; then 
    echo "Creating PaSSHport database ..." 
    su -c '~/passhport-run-env/bin/python /passhport/passhportd/db_create.py' passhport
fi

# Configure PaSSHport
echo "Configuring PaSSHport ..."
for tpl_file in /etc/passhport/*.tpl; do
    conf_file=${tpl_file%.tpl}
    if [ ! -f ${conf_file} ]; then
        envsubst < ${tpl_file} > ${conf_file}
    fi
done

# Configure SSHD
echo "Configuring SSHD ..."
if [ ! -f /etc/ssh/sshd_config ]; then
    envsubst < /etc/ssh/sshd_config.tpl > /etc/ssh/sshd_config
fi

# Execute customs scripts if needed
mkdir -p /usr/local/bin/frx-start.d
for exe in $(find /usr/local/bin/frx-start.d -executable ! -type d | sort); do
    echo "Executing start script : '${exe}' ..."
	/bin/bash ${exe}
done

# Start supervisor
echo "Starting PaSSHport ..."
mkdir -p /run/sshd /var/log/supervisor /var/log/passhport
chown passhport:passhport -R /var/log/passhport
/usr/bin/supervisord -c /etc/supervisord.conf